
# docker-compose -p comp3095-microservices -f docker-compose.yml up -d --build


version: '3.9'

services:
  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: ["start-dev", "--import-realm"]
    environment:
      - DB_VENDOR=postgres
      - DB_ADDR=postgres-keycloak
      - DB_DATABASE=keycloak
      - DB_USER=admin
      - DB_PASSWORD=password
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=password
      - ROOT_LOGLEVEL=DEBUG
      - JBOSS_LOG_MANAGER_ROOT_LOGGER=DEBUG,stdout,FILE
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import
    depends_on:
      postgres-keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://keycloak:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring_network

  postgres-keycloak:
    image: postgres:latest
    container_name: postgres-keycloak
    ports:
      - "5456:5432"
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - ./data/keycloak:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring_network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    image: api-gateway
    container_name: api-gateway
    ports:
      - "9000:9000"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI: http://keycloak:8080/realms/spring-microservices-security-realm
    networks:
      - spring_network


  order-service:
    build:
      context: ./order-service
      dockerfile: ./Dockerfile
    image: order-service
    container_name: order-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-order:5432/order-service
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      postgres-order:
        condition: service_healthy
    networks:
      - spring_network

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    image: inventory-service
    container_name: inventory-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-inventory:5432/inventory-service
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      postgres-inventory:
        condition: service_healthy
    networks:
      - spring_network

  postgres-inventory:
    image: postgres:latest
    container_name: postgres-inventory
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    ports:
      - "5434:5432"
    volumes:
      - ./local-docker-file/postgres/data/inventory:/data/postgres
      - ./local-docker-file/postgres/init/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring_network

  postgres-order:
    image: postgres:latest
    container_name: postgres-order
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    ports:
      - "5435:5432"
    volumes:
      - ./local-docker-file/postgres/data/order:/data/postgres
      - ./local-docker-file/postgres/init/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-comp3095
    ports:
      - "8871:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.ca
      PGADMIN_DEFAULT_PASSWORD: password
    depends_on:
      postgres-keycloak:
        condition: service_healthy
    networks:
      - spring_network

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    image: product-service
    container_name: product-service
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - spring_network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - spring_network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongodb
    depends_on:
      - mongodb
    networks:
      - spring_network

volumes:
  mongodb:
    driver: local

networks:
  spring_network:
    driver: bridge
